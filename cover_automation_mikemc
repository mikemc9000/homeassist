blueprint:
  name: sun_protection_metno
  description: Close cover when sun is shining and open when it stops based on met.no weather data.
  domain: automation
  input:
    cover_entity:
      name: Cover Entity
      description: The entity ID of the cover to manage.
      selector:
        entity:
          domain:
            - cover
          single: true
    sun_position_start:
      name: Sun Azimuth Position Start
      description: Sun azimuth. When the sun is below this value, the cover could be triggered.
      default: 89
      selector:
        number:
          min: 0.0
          max: 360.0
          unit_of_measurement: 째
          step: 1.0
          mode: slider
    sun_position_end:
      name: Sun Azimuth Position End
      description: Sun azimuth. When the sun is over this value, the cover could be triggered.
      default: 200
      selector:
        number:
          min: 0.0
          max: 360.0
          unit_of_measurement: 째
          step: 1.0
          mode: slider
    sun_elevation_start:
      name: Sun Elevation to Start
      description: Sun elevation. When the sun is over this value, the cover could be triggered.
      default: 32
      selector:
        number:
          min: -100.0
          max: 360.0
          unit_of_measurement: 째
          step: 1.0
          mode: slider
    outdoor_temp:
      name: Outdoor Temperature
      description: Temperature above which the shutters will close.
      default: 16
      selector:
        number:
          min: 0.0
          max: 30.0
          unit_of_measurement: 째C
          step: 1.0
          mode: slider
    close_time:
      name: Closing Time
      description: Duration the shutter closes (max 60s).
      default: 10
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    weather_service:
      name: Weather Service
      description: Weather service providing current conditions.
      selector:
        entity:
          domain:
            - weather
          single: true
  variables:
    cover_e: !input cover_entity
    var_e: '{{ ''var.'' + cover_e.split('.')[1] }}'
    protection_begin: !input sun_position_start
    protection_end: !input sun_position_end
    elevation_begin: !input sun_elevation_start
    outdoor_temp: !input outdoor_temp
    weather_service: !input weather_service
  mode: parallel
  trigger:
    - platform: time_pattern
      minutes: '/5'
  condition:
    - condition: sun
      before: sunset
      after: sunrise
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ is_state('input_boolean.cover_manage_cover_with_sun', 'on') and
                   state_attr(weather_service, 'temperature') > outdoor_temp and
                   state_attr('sun.sun', 'azimuth') > protection_begin and
                   state_attr('sun.sun', 'azimuth') < protection_end and
                   state_attr('sun.sun', 'elevation') > elevation_begin }}
          sequence:
            - service: cover.close_cover
              target:
                entity_id: '{{ cover_e }}'
            - delay: "{{ close_time }}"
            - service: cover.stop_cover
              target:
                entity_id: '{{ cover_e }}'
            - condition: state
              entity_id: '{{ cover_e }}'
              state: 'closed'
            - service: var.set
              data:
                entity_id: '{{ var_e }}'
                value: 1
        - conditions:
            - condition: template
              value_template: >
                {{ is_state('input_boolean.cover_manage_cover_with_sun', 'on') and
                   (state_attr('sun.sun', 'azimuth') < protection_begin or
                    state_attr('sun.sun', 'azimuth') > protection_end or
                    state_attr('sun.sun', 'elevation') < elevation_begin) }}
          sequence:
            - service: cover.open_cover
              target:
                entity_id: '{{ cover_e }}'
            - condition: state
              entity_id: '{{ cover_e }}'
              state: 'open'
            - service: var.set
              data:
                entity_id: '{{ var_e }}'
                value: 0
